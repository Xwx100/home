server {
    listen 80;
    server_name 127.0.0.1 172.16.2.187;
    access_log  /data/logs/nginx/proxy.access.log  main;
    resolver 223.5.5.5 223.6.6.6 114.114.114.114;
    location /proxy {
        content_by_lua_block {
            local limit_count = require "resty.limit.count"
            local lim, _ = limit_count.new("req_limit_count_store", 30, 30)
            local headers = ngx.req.get_headers()
            for k,v in pairs(headers) do
                ngx.log(ngx.ERR, "origin_request_header: "..k..":", v)
            end
            local user =  headers['xu-req-user']
            if user == nil then
                return ngx.say('{"header":{"desc":"user为空，请重试","status":2,"failures":[]}}')
            end
            local url = headers["xu-req-url"]
            if url == nil then
                return ngx.say('{"header":{"desc":"url为空，请重试","status":2,"failures":[]}}')
            end
            local pass = false
            for i = 1, 30 do
                local delay, err = lim:incoming(user, true)
                if not delay then
                    ngx.sleep(1)
                else
                    pass = true;
                    break
                end
            end
            if not pass then
                return ngx.say('{"header":{"desc":"proxy请求次数超出限制，请重试","status":2,"failures":[]}}')
            end
            local http = require "resty.http"
            local httpc = http.new()
            -- parsed_uri = [scheme, host, port, path, query]
            local parsed_uri, err = httpc:parse_uri(url, false)
            local scheme = parsed_uri[1]
            ngx.log(ngx.ERR, "request_scheme:", scheme)
            headers['host'] = parsed_uri[2]
            headers['xu-req-user'] = nil
            headers['xu-req-url'] = nil
            local params = {
                method = ngx.req.get_method(),
                headers = headers,
            }
            if ngx.req.get_uri_args() ~= nil then
                params["query"] = ngx.req.get_uri_args()
            end
            for k,v in pairs(headers) do
                ngx.log(ngx.ERR, "real_request_header: "..k..":", v)
            end
            ngx.req.read_body()
            if ngx.req.get_body_data() ~= nil then
                ngx.log(ngx.ERR, "request_body:", ngx.req.get_body_data())
                params["body"] = ngx.req.get_body_data()
            end
            if scheme == "https" then
                params["ssl_verify"] = false
            end
            httpc:set_timeout(30000)
            res, err = httpc:request_uri(url, params)
            if not res then
                ngx.log(ngx.ERR, "failed to get res: ", err)
                return ngx.say('{"header":{"desc":"proxy请求失败","status":2,"failures":[]}}')
            end
            for k,v in pairs(res.headers) do
                ngx.header[k] = v
            end
            return ngx.say(tostring(res.body))
        }
    }

    location /newproxy {
        content_by_lua_block {
            local limit_count = require "resty.limit.count"
            local headers = ngx.req.get_headers()
            for k, v in pairs(headers) do
                ngx.log(ngx.ERR, "origin_request_header: " .. k .. ":", v)
            end
            local key = headers['xu-req-key']
            local period = headers['xu-req-period']
            local limit = headers['xu-req-limit']
            local errmsg = headers['xu-req-errmsg']
            if errmsg == nil then
                errmsg = "{\"ret\":\"1\",\"msg\":\"%s\",\"content\":[]}"
            end
            local lim
            if period ~= nil and limit ~= nil and errmsg ~=nil then
                limit = tonumber(limit)
                period = tonumber(period)
                lim, _ = limit_count.new("req_limit_count_store", limit, period)
            else
                return ngx.say('缺少请求参数')
            end
            if key == nil then
                return ngx.say(string.format(errmsg, 'key为空，请重试'))
            end
            local url = headers["xu-req-url"]
            if url == nil then
                return ngx.say(string.format(errmsg, 'url为空'))
            end
            local pass = false
            for i = 1, limit do
                local delay, err = lim:incoming(key, true)
                if not delay then
                    ngx.sleep(1)
                else
                    pass = true;
                    break
                end
            end
            if not pass then
                return ngx.say(string.format(errmsg, 'proxy请求次数超出限制，请重试'))
            end
            local http = require "resty.http"
            local httpc = http.new()
            -- parsed_uri = [scheme, host, port, path, query]
            local parsed_uri, err = httpc:parse_uri(url, false)
            local scheme = parsed_uri[1]
            local host = parsed_uri[2]
            ngx.log(ngx.ERR, "request_scheme:", scheme)
            headers['host'] = parsed_uri[2]
            -- 清理请求头
            headers['xu-req-url'] = nil
            headers['xu-req-key'] = nil
            headers['xu-req-errmsg'] = nil
            headers['xu-req-period'] = nil
            headers['xu-req-limit'] = nil
            local params = {
                method = ngx.req.get_method(),
                headers = headers,
            }
            if ngx.req.get_uri_args() ~= nil then
                params["query"] = ngx.req.get_uri_args()
            end
            for k, v in pairs(headers) do
                ngx.log(ngx.ERR, "real_request_header: " .. k .. ":", v)
            end
            ngx.req.read_body()
            if ngx.req.get_body_data() ~= nil then
                ngx.log(ngx.ERR, "request_body:", ngx.req.get_body_data())
                params["body"] = ngx.req.get_body_data()
            end
            if scheme == "https" then
                params["ssl_verify"] = false
            end
            -- 腾讯广告服务偶尔出现dns服务不稳定，采用ip直连
            if headers['xu-req-ip'] ~= nil then
                ip = headers['xu-req-ip']
                headers['xu-req-ip'] = nil
                url = string.gsub(url, host, ip)
                ngx.log(ngx.ERR, "real url: " .. url)
            end
            httpc:set_timeout(30000)
            res, err = httpc:request_uri(url, params)
            if not res then
                ngx.log(ngx.ERR, "failed to get res: ", err)
                return ngx.say(string.format(errmsg, 'proxy请求失败，请稍后重试'))
            end
            for k, v in pairs(res.headers) do
                ngx.header[k] = v
            end
            return ngx.say(tostring(res.body))
        }
    }
}
